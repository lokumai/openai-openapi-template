from typing import List
from pydantic import BaseModel, Field
from enum import Enum


class ChoiceSchemaFinishReasonType(str, Enum):
    STOP = "stop"
    LENGTH = "length"
    CONTENT_FILTER = "content_filter"


class MessageSchemaRoleType(str, Enum):
    USER = "user"
    ASSISTANT = "assistant"
    SYSTEM = "system"


class MessageRequest(BaseModel):
    """
    Represents a message in a chat completion.
    """

    role: MessageSchemaRoleType = Field(..., description="The role of the message")
    content: str = Field(..., description="The content of the message")


class ChatCompletionBase(BaseModel):
    """
    Represents a chat completion.
    """

    completion_id: str = Field(
        ...,
        description="The unique identifier for the chat completion. When starting a new chat, this will be a new UUID. When continuing a previous chat, this will be the same as the previous chat completion id.",
    )


class ChatCompletionRequest(ChatCompletionBase):
    """
    Represents a chat completion request. Starting a new chat or continuing a previous chat.
    """

    model: str = Field(..., description="The model to use for the chat completion")
    messages: List[MessageRequest] = Field(..., description="The messages to use for the chat completion")
    stream: bool = Field(..., description="Whether to stream the chat completion")


class MessageResponse(BaseModel):
    """
    A chat completion message generated by the model.
    """

    message_id: str = Field(..., description="The unique identifier for the message")
    role: MessageSchemaRoleType = Field(..., description="The role of the message")
    content: str = Field(..., description="The content of the message")
    figure: dict = Field(..., description="The figure data to be visualized")


class ChoiceResponse(BaseModel):
    finish_reason: ChoiceSchemaFinishReasonType = Field(
        ...,
        description="The reason the model stopped generating tokens. This will be `stop` if the model hit a natural stop point or a provided stop sequence, `length` if the maximum number of tokens specified in the request was reached, `content_filter` if content was omitted due to a flag from our content filters",
    )
    index: int = Field(..., description="The index of the choice in the list of choices.")
    message: MessageResponse = Field(..., description="The message to use for the chat completion")
    # logprobs: str = None # not implemented yet


class ChatCompletionResponse(ChatCompletionBase):
    """
    Represents a chat completion response returned by model, based on the provided input.
    """

    completion_id: str = Field(..., description="The unique identifier for the chat completion")
    choices: List[ChoiceResponse] = Field(..., description="A list of chat completion choices.")
    created: int = Field(
        ...,
        description="The Unix timestamp (in seconds) of when the chat completion was created.",
    )
    model: str = Field(..., description="The model used for the chat completion")
    # not implemented yet
    # service_tier: Optional[ServiceTier] = ServiceTier.AUTO
    # system_fingerprint: Optional[StrictStr] = Field(default=None, description="This fingerprint represents the backend configuration that the model runs with.  Can be used in conjunction with the `seed` request parameter to understand when backend changes have been made that might impact determinism. ")
    # object: StrictStr = Field(description="The object type, which is always `chat.completion`.")
    # usage: Optional[CompletionUsage] = None


class ChatCompletionStreamResponse(ChatCompletionResponse):
    """
    Represents a chat completion stream response returned by model, based on the provided input.
    """


class PlotRequest(BaseModel):
    """
    Represents a plot request for a given message to be visualized.
    """

    message_id: str = Field(
        ...,
        description="The unique identifier for the message that the plot is for",
    )


class PlotResponse(BaseModel):
    """
    Represents a plot response.
    """

    plot_id: str = Field(..., description="The unique identifier for the plot")
    completion_id: str = Field(
        ...,
        description="The unique identifier for the chat completion that the plot is for",
    )
    message_id: str = Field(
        ...,
        description="The unique identifier for the message that the plot is for",
    )
    figure: dict = Field(..., description="The figure data to be visualized")
